1. test_add_event()
Сценарий: Пользователь хочет добавить новое событие в свой календарь. Он заполняет форму с названием события, датой и временем, а также описанием. После нажатия кнопки “Добавить” событие должно появиться в календаре.
Создается экземпляр класса Calendar.
Создается экземпляр класса Event с заданными параметрами (название, дата/время, описание).
Вызывается метод add_event() для добавления события в календарь.
Проверяется, что событие присутствует в списке событий календаря (self.assertIn()).
Проверяется, что количество событий в календаре увеличилось на единицу (self.assertEqual()).

2. test_remove_event()
Сценарий: Пользователь хочет удалить событие из своего календаря. Он выбирает событие из списка и нажимает кнопку “Удалить”. После этого событие должно исчезнуть из календаря.
Создается экземпляр класса Calendar.
Создаются два экземпляра класса Event (чтобы проверить, что удаляется только нужное событие).
Оба события добавляются в календарь.
Вызывается метод remove_event() для удаления первого события из календаря.
Проверяется, что первое событие больше не присутствует в списке событий календаря (self.assertNotIn()).
Проверяется, что количество событий в календаре уменьшилось на единицу (self.assertEqual()).

3. test_edit_event()
Сценарий: Пользователь хочет отредактировать существующее событие в своем календаре. Он выбирает событие, вносит изменения в форму редактирования, например, меняет название, дату/время или описание и нажимает кнопку “Сохранить”. Измененное событие должно заменить старое в календаре.
Создается экземпляр класса Calendar.
Создается экземпляр класса Event (старое событие).
Старое событие добавляется в календарь.
Создается новый экземпляр класса Event с измененными параметрами (новое событие).
Вызывается метод edit_event() для замены старого события новым.
Проверяется, что метод edit_event() вернул True, что означает успешное редактирование.
Проверяется, что новое событие присутствует в списке событий календаря (self.assertIn()).
Проверяется, что старое событие больше не присутствует в списке событий календаря (self.assertNotIn()).

4. test_get_upcoming_events_no_events()
Сценарий: Пользователь открывает календарь, в котором нет ни одного события. Приложение должно отобразить пустой список предстоящих событий или сообщение о том, что событий нет.
Создается экземпляр класса Calendar.
В календарь не добавляется ни одного события.
Вызывается метод get_upcoming_events() с указанием периода времени.
Проверяется, что возвращенный список предстоящих событий пуст (self.assertEqual(len(upcoming_events), 0)).
5. test_get_upcoming_events_outside_range()
Сценарий: Пользователь хочет получить список предстоящих событий на следующую неделю, но в календаре есть события, которые запланированы на более поздний срок. Эти события не должны отображаться в списке предстоящих событий.